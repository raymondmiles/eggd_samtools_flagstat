#!/bin/bash
set -e -x -o pipefail

# dnanexus_samtools_flagstat_v1.1.0 
# Generated by dx-app-wizard.
#
# Basic execution pattern: Your app will run on a single machine from
# beginning to end.
#
# Your job's input variables (if any) will be loaded as environment
# variables before this script runs.  Any array inputs will be loaded
# as bash arrays.
#
# Any code outside of main() (or any entry point you may add) is
# ALWAYS executed, followed by running the entry point itself.
#
# See https://documentation.dnanexus.com/developer for tutorials on how
# to modify this file.

main() {

    echo "Value of input_bam: '$input_bam'"
    echo "Value of input_bam_index: '$input_bam_index'"

    echo "installing packages"

    cd /packages
    tar -jxvf samtools-1.16.1.tar.bz2
    cd samtools-1.16.1
    # tar -jxvf samtools-1.7.tar.bz2 # Deprecated
    #cd samtools-1.7
    ./configure --prefix=/packages
    make
    make install
    export PATH=/packages/bin:$PATH
    
    echo 'streaming files'
    cd 
    # The following line(s) use the dx command-line tool to download your file
    # inputs to the local file system using variable names for the filenames. To
    # recover the original filenames, you can use the output of "dx describe
    # "$variable" --name".

    dx download "$input_bam" -o input_bam

    dx download "$input_bam_index" -o input_bam_index

    # Fill in your application code here.
    #

    outfile=${input_bam_prefix}.flagstat
    samtools flagstat input_bam > $outfile

    # To report any recognized errors in the correct format in
    # $HOME/job_error.json and exit this script, you can use the
    # dx-jobutil-report-error utility as follows:
    #
    #   dx-jobutil-report-error "My error message"
    #
    # Note however that this entire bash script is executed with -e
    # when running in the cloud, so any line which returns a nonzero
    # exit code will prematurely exit the script; if no error was
    # reported in the job_error.json file, then the failure reason
    # will be AppInternalError with a generic error message.

    # The following line(s) use the dx command-line tool to upload your file
    # outputs after you have created them on the local file system.  It assumes
    # that you have used the output field name for the filename for each output,
    # but you can change that behavior to suit your needs.  Run "dx upload -h"
    # to see more options to set metadata.

    flagstat_output=$(dx upload $outfile --brief)

    # The following line(s) use the utility dx-jobutil-add-output to format and
    # add output variables to your job's output as appropriate for the output
    # class.  Run "dx-jobutil-add-output -h" for more information on what it
    # does.

    dx-jobutil-add-output flagstat_output "$flagstat_output" --class=file
}
